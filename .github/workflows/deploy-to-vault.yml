name: Deploy build to Dockview Vault

on:
  push:
    tags:
      - "*-v*.*.*" # This triggers the action on version tags like v1.0.0

env:
  PROJECT_NAME: vite-ssr-demo # Replace with your project name
  DIST_DIR: dist # Replace with your dist directory name if different
  ENTRY: server.js # Replace with the server file name if different
  GITHUB_EMAIL: robichaudsarah@outlook.com
  GITHUB_NAME: Sarah Robichaud
  GITHUB_USERNAME: sarahrobichaud

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Upload dist directory
        uses: actions/upload-artifact@v2
        with:
          name: build-output
          path: ${{ env.DIST_DIR }}

      - name: Conditionally upload server.js
        if: ${{ steps.build.outcome == 'success' && (env.SERVER_JS && env.SERVER_JS != '') }}
        uses: actions/upload-artifact@v2
        with:
          name: server-file
          path: ${{ env.ENTRY }}
        continue-on-error: true # Ignore error if file doesn't exist

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Download dist artifact
        uses: actions/download-artifact@v2
        with:
          name: build-output

      - name: Conditionally download server.js artifact
        if: ${{ steps.build.outcome == 'success' && (env.ENTRY && env.ENTRY != '') }}
        uses: actions/download-artifact@v2
        with:
          name: server-file
        continue-on-error: true # Ignore error if file doesn't exist

      - name: Configure Git
        run: |
          git config --global user.email "${{ env.GITHUB_EMAIL }}"
          git config --global user.name "${{ env.GITHUB_NAME }}"

      - name: Deploy to the central showcase repo
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Clone the central showcase repository
          git clone https://$GH_TOKEN@github.com/${{ env.GITHUB_USERNAME }}/harborvault.git

          # Copy build output to the appropriate directory in the showcase repo
          mkdir -p harborvault/$PROJECT_NAME/${GITHUB_REF_NAME}/build/${{ env.DIST_DIR }}/
          cp -R ./* harborvault/$PROJECT_NAME/${GITHUB_REF_NAME}/build/${{ env.DIST_DIR }}/

          # Conditionally copy server.js if it exists
          if [ -f "${{ env.ENTRY }}" ]; then
            cp ${{ env.ENTRY }} harborvault/$PROJECT_NAME/${GITHUB_REF_NAME}/build/${{ env.ENTRY }}
          fi

          echo "Source code available at: https://github.com/${{ env.GITHUB_USERNAME}}/$PROJECT_NAME/tree/${GITHUB_REF_NAME}" > harborvault/$PROJECT_NAME/${GITHUB_REF_NAME}/source-link.txt

          # Commit and push changes to the showcase repo
          cd harborvault
          git add .
          git commit -m "Deploy ${GITHUB_REF_NAME}"
          git push origin main
